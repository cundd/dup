#!/usr/bin/env bash
#
# DUP CLI client binary
#
# This is the main DUP commmand line tool.
# It will also load plugins from dup/scripts/cli/plugins
set -o nounset
set -o errexit

# --------------------------------------------------------
# Subcommands
# --------------------------------------------------------
function dupcli::list_plugins() {
    for plugin in $(dupcli::_list_plugin_files); do
        basename $plugin ".sh";
    done
}

function dupcli::list_commands() {
    dupcli::_list_commands;
}

function dupcli::config() {
    if ! duplib::command_exists "ruby"; then
        duplib::error "Ruby must be installed";
        return 1;
    fi

    local script_path=$(dirname "$0");

    if [[ ! -e "$script_path/ruby/config-get" ]]; then
        duplib::error "$script_path/ruby/config-get not found";
        return 1;
    fi

    "$script_path/ruby/config-get" $*;
}

# Try to find out if the current machine is the guest
function dupcli::is_guest() {
    duplib::is_guest;
}

# Try to find out if the current machine is the host
function dupcli::is_host() {
    duplib::is_host;
}


# --------------------------------------------------------
# Helper methods
# --------------------------------------------------------
function dupcli::_load_duplib() {
    DUP_LIB_PATH="${DUP_LIB_PATH:-$(dirname "$0")/scripts/lib/duplib.sh}";
    if [[ ! -e "$DUP_LIB_PATH" ]] && [[ -e "/vagrant/dup/scripts/lib/duplib.sh" ]]; then
        DUP_LIB_PATH="/vagrant/dup/scripts/lib/duplib.sh";
    elif [[ ! -e "$DUP_LIB_PATH" ]]; then
        >&2 echo "Could not find dup lib";
        exit 1;
    fi
    source "$DUP_LIB_PATH";
}

function dupcli::_get_cli_directory() {
    if [[ -e "$(dirname "$0")/scripts/cli" ]]; then
        echo "$(dirname "$0")/scripts/cli";
    elif [[ -e "/vagrant/dup/scripts/cli" ]]; then
        echo "/vagrant/dup/scripts/cli";
    else
        >&2 echo "Could not find dup cli directory";
        exit 1;
    fi
}

function dupcli::_print_help() {
    echo "Usage $0 <command> [<args>]

Commands:";
    for command in $(dupcli::_list_commands;); do
        echo "    $command";
    done

#     echo "Usage $0 <command> [<args>]
#
# Commands:
#     download user@server    downloads fileadmin and typo3conf using rsync
#     halt                    stops the vagrant machine
#     provision               provisions the vagrant machine
#     ssh                     connects to the vagrant machine via SSH
#     up                      starts and provisions the vagrant environment
# ";
}

# Returns the vhost document root for the host VM
function dupcli::_get_host_vhost_document_root() {
    if [ -z ${DUP_VHOST_DOCUMENT_ROOT+x} ]; then
        echo $DUP_VHOST_DOCUMENT_ROOT;
    else
        echo "$(dirname "$0")/../httpdocs";
    fi
}

# Returns the vhost document root for the guest VM
function dupcli::_get_guest_vhost_document_root() {
    if [ -z ${DUP_VHOST_DOCUMENT_ROOT+x} ]; then
        echo $DUP_VHOST_DOCUMENT_ROOT;
    else
        duplib::get_vhost_document_root;
    fi
}

function dupcli::_list_plugin_files() {
    find "$(dupcli::_get_cli_directory)/plugins" -maxdepth 1 -type f -iname '*.sh';
}

function dupcli::_load_plugins() {
    for plugin in $(dupcli::_list_plugin_files); do
        source $plugin;
    done
}

function dupcli::_list_commands() {
    local line_start='declare -f dupcli::';
    declare -F|grep "$line_start"|sed "s/$line_start//"|sed "/^_/d"
}


# --------------------------------------------------------
# Main function
# --------------------------------------------------------
function main() {
    dupcli::_load_duplib;
    dupcli::_load_plugins;
    if [[ -z ${1+x} ]]; then
        dupcli::_print_help;
        return 1;
    fi;

    local subcommand="$1";
    shift;

    if type "dupcli::$subcommand" &> /dev/null; then
        dupcli::$subcommand $@;
    else
        dupcli::_print_help;
        return 1;
    fi
}

main $@;
