#!/usr/bin/env bash
#
# DUP CLI client binary
#
# This is the main DUP commmand line tool.
# It will also load plugins from dup/scripts/cli/plugins
set -o nounset
set -o errexit

# Global settings
: ${DUP_CLI_CACHE_LIFETIME="300"}
: ${DUP_CUSTOM_PROVISION_FOLDER="provision"}

# --------------------------------------------------------
# Subcommands
# --------------------------------------------------------
# List the available plugins
function dupcli::list_plugins() {
    for plugin in $(dupcli::_plugins::list_files); do
        basename $plugin ".sh";
    done
}

# List the available commands
function dupcli::list_commands() {
    dupcli::_list_commands;
}

# Display configuration entries
function dupcli::config() {
    if ! duplib::command_exists "ruby"; then
        duplib::error "Ruby must be installed";
        return 1;
    fi

    local script_path=$(dirname "$0");

    if [[ ! -e "$script_path/ruby/config-get" ]]; then
        duplib::error "$script_path/ruby/config-get not found";
        return 1;
    fi

    "$script_path/ruby/config-get" "$@";
}

# Try to find out if the current machine is the guest
function dupcli::is_guest() {
    duplib::is_guest;
}

# Try to find out if the current machine is the host
function dupcli::is_host() {
    duplib::is_host;
}

# Print the version as git commit hash
function dupcli::version() {
    duplib::check_required_command "git";
    cd $DUP_BASE;
    git rev-parse HEAD;
}

# Update dup CLI and library
function dupcli::selfupdate() {
    duplib::check_required_command "git";
    cd $DUP_BASE;
    git pull;
}

# Display this information
function dupcli::help() {
    if [ "$#" -lt 1 ]; then
        dupcli::_cache::check_cache_or_set_and_print "general-help" "dupcli::_help::print_help";
    else
        dupcli::_help::print_help "$@";
    fi
}

# Create a new dup project
function dupcli::create() {
    "$DUP_BASE/shell/cli/dup" "create" "$@";
}

# --------------------------------------------------------
# Helper methods
# --------------------------------------------------------
function dupcli::_duplib::load() {
    DUP_LIB_PATH="${DUP_LIB_PATH:-$DUP_BASE/shell/lib/duplib.sh}";
    if [[ ! -e "$DUP_LIB_PATH" ]] && [[ -e "/vagrant/dup/shell/lib/duplib.sh" ]]; then
        DUP_LIB_PATH="/vagrant/dup/shell/lib/duplib.sh";
    elif [[ ! -e "$DUP_LIB_PATH" ]]; then
        >&2 echo "Could not find dup lib";
        exit 1;
    fi
    source "$DUP_LIB_PATH";
}


function dupcli::_detect_dup_base() {
    if [[ -z ${DUP_BASE+x} ]]; then
        local current_directory="`pwd`";

        cd "$(dirname "$0")";
        DUP_BASE="`pwd`";

        cd $current_directory;
    fi
}

function dupcli::_init_globals() {
    dupcli::_detect_dup_base;
    : ${DUP_PROJECT_BASE="$DUP_BASE/.."};
    : ${DUP_CACHE_PATH="$DUP_BASE/.dup_cache"};

    if [ ! -e "$DUP_CACHE_PATH" ]; then
        mkdir "$DUP_CACHE_PATH";
    fi
}

function dupcli::_get_cli_directory() {
    if [[ -e "$DUP_BASE/shell/cli" ]]; then
        echo "$DUP_BASE/shell/cli";
    elif [[ -e "/vagrant/dup/shell/cli" ]]; then
        echo "/vagrant/dup/shell/cli";
    else
        >&2 echo "Could not find dup cli directory";
        exit 1;
    fi
}

function dupcli::_list_commands() {
    if [ $# -ne 0 ]; then
        duplib::error 'To search for commands use `dupcli::_help::search_commands`';
        return 1;
    fi
    local line_start='declare -f dupcli::';
    declare -F|grep "$line_start"|sed "s/$line_start//"|sed "/^_/d"
}


# --------------------------------------------------------
# Core methods
# --------------------------------------------------------
function dupcli::_core::directory() {
    echo "$(dupcli::_get_cli_directory)/core";
}

function dupcli::_core::list_files() {
    find "$(dupcli::_core::directory)" -maxdepth 1 -type f -iname '*.sh';
}

function dupcli::_core::load() {
    for core_file in $(dupcli::_core::list_files); do
        source $core_file;
    done
}


# --------------------------------------------------------
# Plugin methods
# --------------------------------------------------------
function dupcli::_plugins::directory() {
    echo "$(dupcli::_get_cli_directory)/plugins";
}

function dupcli::_plugins::list_files() {
    find "$(dupcli::_plugins::directory)" -maxdepth 1 -type f -iname '*.sh';
}

function dupcli::_plugins::load() {
    for plugin in $(dupcli::_plugins::list_files); do
        source $plugin;
    done
}


# --------------------------------------------------------
# Main function
# --------------------------------------------------------
function main() {
    dupcli::_init_globals;
    dupcli::_core::load;
    dupcli::_duplib::load;
    dupcli::_plugins::load;
    if [[ $# -eq 0 ]]; then
        dupcli::help;
        return 1;
    fi;

    local subcommand="$1";
    shift;

    if [[ "$subcommand" == "-h" ]] || [[ "$subcommand" == "--help" ]]; then
        dupcli::help;
    elif type "dupcli::$subcommand" &> /dev/null; then
        dupcli::$subcommand "$@";
    else
        dupcli::_help::print_suggestion "$subcommand" "$@";
        return 1;
    fi
}

main "$@";
